plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

loom {
	accessWidenerPath = file("src/main/resources/nbteditor.accesswidener")
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	
	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
	// Uncomment the following line to enable the deprecated Fabric API modules. 
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.
	
	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
	
	implementation files("nbteditor_1.17/build/devlibs/nbteditor_1.17-0.0.0-dev.jar")
	
	modImplementation "maven.modrinth:modmenu:13.0.3"
	modImplementation "maven.modrinth:nbt-autocomplete:nJhOBbir"
}

processResources {
	inputs.property "version", project.version
	
	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 16
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
	
	sourceCompatibility = JavaVersion.VERSION_16
	targetCompatibility = JavaVersion.VERSION_16
}

compileJava.dependsOn ":nbteditor_1.17:jar"
remapSourcesJar.dependsOn ":nbteditor_1.17:jar"

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

def checkRefmap(Map json) {
	if (!(json.keySet() - ["mappings", "data"]).isEmpty())
		return false;
	if (!(json.data.keySet() - ["named:intermediary"]).isEmpty())
		return false;
	return true;
}

task mergeRefmapJson {
	dependsOn classes
	dependsOn ":nbteditor_1.17:classes"
	
	doLast {
		File mainRefmap = file("build/classes/java/main/nbteditor-refmap.json")
		File additionalRefmap = file("nbteditor_1.17/build/classes/java/main/nbteditor_1.17-refmap.json")
		
		if (!mainRefmap.exists())
			throw new GradleException("Missing main refmap!");
		if (!additionalRefmap.exists())
			throw new GradleException("Missing 1.17 refmap!");
		
		def parser = new JsonSlurper()
		def mainJson = parser.parse(mainRefmap)
		def additionalJson = parser.parse(additionalRefmap)
		
		if (!checkRefmap(mainJson))
			throw new GradleException("Main refmap is invalid!");
		if (!checkRefmap(additionalJson))
			throw new GradleException("1.17 refmap is invalid!");
		
		mainJson.mappings += additionalJson.mappings
		mainJson.data["named:intermediary"] += additionalJson.data["named:intermediary"]
		
		mainRefmap.text = JsonOutput.prettyPrint(JsonOutput.toJson(mainJson))
	}
}

jar {
	inputs.property "archivesName", project.base.archivesName
	
	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
	
	dependsOn mergeRefmapJson
}

remapJar {
	dependsOn ":nbteditor_1.17:remapJar"
	from(zipTree("nbteditor_1.17/build/libs/nbteditor_1.17-0.0.0.jar")) {
		include "**/*.class"
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}
	
	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

test {
    exclude '**/*'
}